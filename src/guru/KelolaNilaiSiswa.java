package guru;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import config.DatabaseConnection;
import interfaces.NilaiSiswaInterface;
import java.awt.event.MouseEvent;
import javax.swing.ImageIcon;




/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author ndita
 */
public class KelolaNilaiSiswa extends javax.swing.JFrame  implements NilaiSiswaInterface {
    private int idUserLogin;

    /**
     * Creates new form KelolaDataNilai
     */
    public KelolaNilaiSiswa() {
    this.idUserLogin = idUserLogin;
    initComponents();
    setupTableColumns();
    loadTableData();
    setupTableMouseListener();
    
    }
    
    private void setupTableMouseListener() {
    tableNilai.addMouseListener(new java.awt.event.MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) {
            int selectedRow = tableNilai.getSelectedRow();
            if (selectedRow != -1) {
                // Ambil data dari model tabel berdasarkan baris yang dipilih
                txtNis.setText(tableNilai.getValueAt(selectedRow, 0).toString()); // Kolom ke-0: NIS
                txtKodeMapel.setText(tableNilai.getValueAt(selectedRow, 1).toString()); // Kolom ke-1: Kode Mapel
                txtNilaiTugas.setText(tableNilai.getValueAt(selectedRow, 2).toString()); // Kolom ke-2: Nilai Tugas
                txtNilaiUTS.setText(tableNilai.getValueAt(selectedRow, 3).toString()); // Kolom ke-3: Nilai UTS
                txtNilaiUAS.setText(tableNilai.getValueAt(selectedRow, 4).toString()); // Kolom ke-4: Nilai UAS
                txtNilaiRata.setText(tableNilai.getValueAt(selectedRow, 5).toString()); // Kolom ke-5: Nilai Rata-Rata
                txtHasil.setText(tableNilai.getValueAt(selectedRow, 6).toString()); // Kolom ke-6: Status Kelulusan
                txtIDUser.setText(tableNilai.getValueAt(selectedRow, 7).toString()); // Kolom ke-7: ID User
            }
        }
    });
}
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtNis = new javax.swing.JTextField();
        txtKodeMapel = new javax.swing.JTextField();
        txtNilaiTugas = new javax.swing.JTextField();
        txtNilaiUTS = new javax.swing.JTextField();
        txtNilaiUAS = new javax.swing.JTextField();
        txtNilaiRata = new javax.swing.JTextField();
        txtHasil = new javax.swing.JTextField();
        btnHitung = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnSimpan = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnKeluar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableNilai = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtIDUser = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(202, 6, -1, -1));

        txtNis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNisActionPerformed(evt);
            }
        });
        getContentPane().add(txtNis, new org.netbeans.lib.awtextra.AbsoluteConstraints(202, 81, 117, -1));
        getContentPane().add(txtKodeMapel, new org.netbeans.lib.awtextra.AbsoluteConstraints(202, 118, 117, -1));
        getContentPane().add(txtNilaiTugas, new org.netbeans.lib.awtextra.AbsoluteConstraints(202, 155, 117, -1));
        getContentPane().add(txtNilaiUTS, new org.netbeans.lib.awtextra.AbsoluteConstraints(202, 192, 117, -1));
        getContentPane().add(txtNilaiUAS, new org.netbeans.lib.awtextra.AbsoluteConstraints(202, 229, 117, -1));

        txtNilaiRata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNilaiRataActionPerformed(evt);
            }
        });
        getContentPane().add(txtNilaiRata, new org.netbeans.lib.awtextra.AbsoluteConstraints(202, 330, 117, -1));

        txtHasil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHasilActionPerformed(evt);
            }
        });
        getContentPane().add(txtHasil, new org.netbeans.lib.awtextra.AbsoluteConstraints(202, 368, 117, -1));

        btnHitung.setBackground(new java.awt.Color(0, 204, 255));
        btnHitung.setText("Tampilkan");
        btnHitung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHitungActionPerformed(evt);
            }
        });
        getContentPane().add(btnHitung, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 297, -1, -1));

        jLabel3.setText("NIS");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 81, -1, -1));

        jLabel4.setText("Kode Mata Pelajaran");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 121, -1, -1));

        jLabel5.setText("Nilai Tugas");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 158, -1, -1));

        btnSimpan.setBackground(new java.awt.Color(0, 204, 255));
        btnSimpan.setText("Simpan");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });
        getContentPane().add(btnSimpan, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 240, -1, -1));

        btnUpdate.setBackground(new java.awt.Color(51, 204, 255));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 240, -1, -1));

        btnHapus.setBackground(new java.awt.Color(0, 204, 255));
        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });
        getContentPane().add(btnHapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 240, -1, -1));

        btnKeluar.setBackground(new java.awt.Color(204, 204, 204));
        btnKeluar.setText("Kembali");
        btnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKeluarActionPerformed(evt);
            }
        });
        getContentPane().add(btnKeluar, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 350, -1, -1));

        tableNilai.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableNilai);

        jScrollPane2.setViewportView(jScrollPane1);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(337, 44, 354, 160));

        jLabel2.setText("Nilai UTS");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 195, -1, -1));

        jLabel6.setText("Nilai UAS");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 232, -1, -1));

        jLabel7.setText("Nilai Rata-Rata");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 333, -1, -1));

        jLabel9.setText("Status");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 371, -1, -1));

        txtIDUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDUserActionPerformed(evt);
            }
        });
        getContentPane().add(txtIDUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(202, 44, 117, -1));

        jLabel8.setText("Id User");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 47, -1, -1));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/guru/background.png"))); // NOI18N
        jLabel10.setText("jLabel10");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 400));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
     simpanData();
     loadTableData();
     tampilkanDataKeTabel();
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
       updateData();
       loadTableData();
       tampilkanDataKeTabel();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
       hapusData();
       loadTableData();
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKeluarActionPerformed
        dispose();
        new FormNilai(idUserLogin).setVisible(true);
    }//GEN-LAST:event_btnKeluarActionPerformed

    private void btnHitungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHitungActionPerformed
        hitungNilai();
    }//GEN-LAST:event_btnHitungActionPerformed

    private void txtHasilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHasilActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHasilActionPerformed

    private void txtNilaiRataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNilaiRataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNilaiRataActionPerformed

    private void txtNisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNisActionPerformed

    private void txtIDUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDUserActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnHitung;
    private javax.swing.JButton btnKeluar;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableNilai;
    private javax.swing.JTextField txtHasil;
    private javax.swing.JTextField txtIDUser;
    private javax.swing.JTextField txtKodeMapel;
    private javax.swing.JTextField txtNilaiRata;
    private javax.swing.JTextField txtNilaiTugas;
    private javax.swing.JTextField txtNilaiUAS;
    private javax.swing.JTextField txtNilaiUTS;
    private javax.swing.JTextField txtNis;
    // End of variables declaration//GEN-END:variables

    @Override
    public void simpanData() {
    String sql = "INSERT INTO nilai (id_user, nis, kd_mapel, nilai_tugas, nilai_uts, nilai_uas, nilai_rata, status_kelulusan) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pst = conn.prepareStatement(sql)) {
            
            String idUserText = txtIDUser.getText().trim();
            if (idUserText.isEmpty()) {
                JOptionPane.showMessageDialog(this, "ID User tidak boleh kosong!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            int idUser;
            try {
                idUser = Integer.parseInt(idUserText);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "ID User harus berupa angka yang valid!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Validasi id_user ada di tabel Siswa
            String checkSql = "SELECT COUNT(*) FROM Siswa WHERE id_user = ?";
            try (PreparedStatement checkPst = conn.prepareStatement(checkSql)) {
                checkPst.setInt(1, idUser);
                ResultSet rs = checkPst.executeQuery();
                if (rs.next() && rs.getInt(1) == 0) {
                    JOptionPane.showMessageDialog(this, "ID User " + idUser + " tidak ditemukan di tabel Siswa!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            String nis = txtNis.getText().trim();
            String kdMapel = txtKodeMapel.getText().trim();
            String nilaiTugas = txtNilaiTugas.getText().trim();
            String nilaiUTS = txtNilaiUTS.getText().trim();
            String nilaiUAS = txtNilaiUAS.getText().trim();
            String nilaiRata = txtNilaiRata.getText().trim();
            String statusKelulusan = txtHasil.getText().trim();
            
            if (nis.isEmpty() || kdMapel.isEmpty() || nilaiTugas.isEmpty() || 
                nilaiUTS.isEmpty() || nilaiUAS.isEmpty() || statusKelulusan.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Semua field wajib harus diisi!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validasi nis ada di tabel Siswa
            checkSql = "SELECT COUNT(*) FROM Siswa WHERE nis = ?";
            try (PreparedStatement checkPst = conn.prepareStatement(checkSql)) {
                checkPst.setString(1, nis);
                ResultSet rs = checkPst.executeQuery();
                if (rs.next() && rs.getInt(1) == 0) {
                    JOptionPane.showMessageDialog(this, "NIS " + nis + " tidak ditemukan di tabel Siswa!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            // Validasi kd_mapel ada di tabel Mata_Pelajaran
            checkSql = "SELECT COUNT(*) FROM Mata_Pelajaran WHERE kd_mapel = ?";
            try (PreparedStatement checkPst = conn.prepareStatement(checkSql)) {
                checkPst.setString(1, kdMapel);
                ResultSet rs = checkPst.executeQuery();
                if (rs.next() && rs.getInt(1) == 0) {
                    JOptionPane.showMessageDialog(this, "Kode Mata Pelajaran " + kdMapel + " tidak ditemukan!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            
            double tugas, uts, uas, rata;
            try {
                tugas = Double.parseDouble(nilaiTugas);
                uts = Double.parseDouble(nilaiUTS);
                uas = Double.parseDouble(nilaiUAS);
                rata = nilaiRata.isEmpty() ? 0.0 : Double.parseDouble(nilaiRata);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Nilai Tugas, UTS, UAS, dan Rata-rata harus berupa angka yang valid!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (!statusKelulusan.equalsIgnoreCase("lulus") && !statusKelulusan.equalsIgnoreCase("tidak lulus")) {
                JOptionPane.showMessageDialog(this, "Status Kelulusan harus 'lulus' atau 'tidak lulus'!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            pst.setInt(1, idUser);
            pst.setString(2, nis);
            pst.setString(3, kdMapel);
            pst.setDouble(4, tugas);
            pst.setDouble(5, uts);
            pst.setDouble(6, uas);
            if (nilaiRata.isEmpty()) {
                pst.setNull(7, java.sql.Types.DECIMAL);
            } else {
                pst.setDouble(7, rata);
            }
            pst.setString(8, statusKelulusan.toLowerCase()); // Sesuaikan dengan ENUM database
            
            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Nilai berhasil disimpan.");
            clearFields();
            
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error saat disimpan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    

    @Override
    public void updateData() {
    String sql = "UPDATE nilai SET kd_mapel = ?, nilai_tugas = ?, nilai_uts = ?, nilai_uas = ?, nilai_rata = ?, status_kelulusan = ? WHERE nis = ?";

try (Connection conn = DatabaseConnection.getConnection()) {
    PreparedStatement pst = conn.prepareStatement(sql);
    pst.setString(1, txtKodeMapel.getText());
    pst.setDouble(2, Double.parseDouble(txtNilaiTugas.getText()));
    pst.setDouble(3, Double.parseDouble(txtNilaiUTS.getText()));
    pst.setDouble(4, Double.parseDouble(txtNilaiUAS.getText()));
    pst.setDouble(5, Double.parseDouble(txtNilaiRata.getText())); 
    pst.setString(6, txtHasil.getText()); 
    pst.setString(7, txtNis.getText());   // PARAMETER 7 (WHERE NIS)

    pst.executeUpdate();
    JOptionPane.showMessageDialog(null, "Data berhasil diupdate.");
} catch (Exception e) {
    JOptionPane.showMessageDialog(null, "Error update data: " + e.getMessage());
}

}
    
private void tampilkanDataKeTabel() {
    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("NIS");
    model.addColumn("Kode Mapel");
    model.addColumn("Nilai Tugas");
    model.addColumn("Nilai UTS");
    model.addColumn("Nilai UAS");
    model.addColumn("Nilai Rata-Rata");
    model.addColumn("Status Kelulusan");

    try {
        String sql = "SELECT * FROM nilai";
        Connection conn = DatabaseConnection.getConnection();
        PreparedStatement pst = conn.prepareStatement(sql);
        ResultSet rs = pst.executeQuery();
        clearFields();

        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getString("nis"),
                rs.getString("kd_mapel"),
                rs.getDouble("nilai_tugas"),
                rs.getDouble("nilai_uts"),
                rs.getDouble("nilai_uas"),
                rs.getDouble("nilai_rata"),        // pastikan kolom ini sudah ada
                rs.getString("status_kelulusan")
            });
        }

      tableNilai.setModel(model); // <- ganti dengan nama JTable kamu
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Gagal memuat data: " + e.getMessage());
    }
}


    @Override
    public void hapusData() {
        String sql = "DELETE FROM nilai WHERE nis = ?";

    try (Connection conn = DatabaseConnection.getConnection();
         PreparedStatement pst = conn.prepareStatement(sql)) {

        pst.setString(1, txtNis.getText());
        pst.executeUpdate();
        clearFields();
        JOptionPane.showMessageDialog(this, "Data berhasil dihapus.");
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error saat hapus: " + e.getMessage());
    }
    }


    @Override
    public void hitungNilai() {
       try {
            // Ambil nilai dari field dan konversi ke double
            double tugas = Double.parseDouble(txtNilaiTugas.getText().trim());
            double uts = Double.parseDouble(txtNilaiUTS.getText().trim());
            double uas = Double.parseDouble(txtNilaiUAS.getText().trim());

            // Validasi rentang nilai (0-100)
            if (tugas < 0 || tugas > 100 || uts < 0 || uts > 100 || uas < 0 || uas > 100) {
                JOptionPane.showMessageDialog(this, "Nilai harus berada dalam rentang 0-100!", "Peringatan", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Hitung rata-rata
            double rata2 = (tugas + uts + uas) / 3;
            txtNilaiRata.setText(String.format("%.2f", rata2));

            // Tentukan status kelulusan
            String hasil = (rata2 >= 75) ? "Lulus" : "Tidak Lulus";
            txtHasil.setText(hasil);

            // Mengatur JComboBox berdasarkan nilai hasil
            txtHasil.setText(hasil); // Menggunakan setSelectedItem() untuk string
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Input nilai harus berupa angka yang valid!", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    

    private void loadTableData() {
    DefaultTableModel model = (DefaultTableModel) tableNilai.getModel();
    model.setRowCount(0); // Kosongkan tabel

    try (Connection conn = DatabaseConnection.getConnection();
         PreparedStatement pst = conn.prepareStatement("SELECT id_user, nis, kd_mapel, nilai_tugas, nilai_uts, nilai_uas, nilai_rata, status_kelulusan FROM nilai")) {
        
        ResultSet rs = pst.executeQuery();

        while (rs.next()) {
            Object[] row = new Object[8];
            row[0] = rs.getString("nis");
            row[1] = rs.getString("kd_mapel");
            row[2] = rs.getDouble("nilai_tugas");
            row[3] = rs.getDouble("nilai_uts");
            row[4] = rs.getDouble("nilai_uas");
            row[5] = rs.getDouble("nilai_rata");
            row[6] = rs.getString("status_kelulusan");
            row[7] = rs.getString("id_user");
            model.addRow(row);
        }
    } catch (SQLException | NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Error saat memuat data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    private void clearFields() {
        txtIDUser.setText("");
        txtNis.setText("");
        txtKodeMapel.setText("");
        txtNilaiTugas.setText("");
        txtNilaiUTS.setText("");
        txtNilaiUAS.setText("");
        txtNilaiRata.setText("");
        txtHasil.setText("");    }

    private void setupTableColumns() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("NIS");
        model.addColumn("Kode Mapel");
        model.addColumn("Nilai Tugas");
        model.addColumn("Nilai UTS");
        model.addColumn("Nilai UAS");
        model.addColumn("Nilai Rata-Rata");
        model.addColumn("Status Kelulusan");
        model.addColumn("ID User");
        tableNilai.setModel(model);   
    }
    
  
    
}
